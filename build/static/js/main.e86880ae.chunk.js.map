{"version":3,"sources":["Filter.js","Form.js","Notification.js","services/numbers.js","App.js","serviceWorker.js","index.js"],"names":["filter","props","react_default","a","createElement","type","value","filterWord","onChange","changeHandler","form","onSubmit","addNew","name","nameChanged","number","numberChanged","notification","_ref","message","className","baseUrl","numbers","getAll","axios","get","then","response","data","create","newObject","post","update","id","put","concat","remove","delete","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","nameChangedHandler","event","setState","newName","target","numberChangedHandler","newNumber","personRemovedHandler","person","window","confirm","numberService","res","tmp","state","persons","index","indexOf","splice","setTimeout","console","log","filterChangedHandler","createNewPerson","newPerson","newPersons","addPerson","preventDefault","find","confirmUpdate","modified","catch","error","updated","notes","_this2","_this3","nameList","toLowerCase","match","src_Notification","Filter","Form","map","key","onClick","React","Component","Boolean","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e86880ae.chunk.js","sourcesContent":["import React from 'react'\n\nconst filter = (props) => {\n  return (\n    <div>\n      <p>Rajaa näytettäviä:</p>\n      <input\n        type='text'\n        value={props.filterWord}\n        onChange={props.changeHandler}\n      />\n    </div>\n  )\n}\n\nexport default filter","import React from 'react'\n\nconst form = (props) => {\n  return (\n    <div>\n      <h3>Lisää uusi</h3>\n      <form onSubmit={props.addNew} >\n        <div>\n          nimi:\n            <input\n            type='text'\n            value={props.name}\n            onChange={props.nameChanged}\n          />\n        </div>\n        <div>\n          numero:\n            <input\n            type='number'\n            value={props.number}\n            onChange={props.numberChanged}\n          />\n        </div>\n        <div>\n          <button type=\"submit\">lisää</button>\n        </div>\n      </form>\n    </div>\n  )\n}\n\nexport default form","import React from 'react'\n\nimport './Notification.css'\n\nconst notification = ({message}) => {\n  if (message === null) {\n    return null\n  }\n  return (\n    <div className=\"success\">\n      {message}\n    </div>\n  )\n}\n\nexport default notification","import axios from 'axios';\nconst baseUrl = '/api/persons';\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then(response => response.data);\n};\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then(response => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then(response => response.data);\n};\n\nconst remove = id => {\n  const request = axios.delete(`${baseUrl}/${id}`);\n  return request.then(response => response.data);\n};\n\nexport default { getAll, create, update, remove };\n","import React from 'react';\n\nimport Filter from './Filter';\nimport Form from './Form';\nimport Notification from './Notification';\nimport numberService from './services/numbers';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      persons: [],\n      newName: '',\n      newNumber: '',\n      filter: '',\n      message: null\n    };\n  }\n\n  componentDidMount() {\n    numberService.getAll().then(response => {\n      this.setState({ persons: response });\n    });\n  }\n\n  nameChangedHandler = event => {\n    this.setState({ newName: event.target.value });\n  };\n\n  numberChangedHandler = event => {\n    this.setState({ newNumber: event.target.value });\n  };\n\n  personRemovedHandler = person => {\n    const confirmRemoval = window.confirm('poistetaanko ' + person.name);\n    confirmRemoval === true\n      ? numberService.remove(person.id).then(res => {\n          let tmp = this.state.persons;\n          const index = tmp.indexOf(person);\n          tmp.splice(index, 1);\n          this.setState({ persons: tmp });\n          this.setState({ message: 'numero poistettu onnistuneesti' });\n          setTimeout(() => {\n            this.setState({ message: null });\n          }, 2000);\n        })\n      : console.log('No removal');\n  };\n\n  filterChangedHandler = event => {\n    this.setState({ filter: event.target.value });\n  };\n\n  createNewPerson = message => {\n    const newPerson = {\n      name: this.state.newName,\n      number: this.state.newNumber\n    };\n    numberService.create(newPerson).then(newPerson => {\n      const newPersons = this.state.persons.concat(newPerson);\n      this.setState({\n        persons: newPersons,\n        newName: '',\n        newNumber: ''\n      });\n      this.setState({\n        message: message\n      });\n      setTimeout(() => {\n        this.setState({ message: null });\n      }, 2000);\n    });\n  };\n\n  addPerson = event => {\n    event.preventDefault();\n    const newPerson = this.state.persons.find(\n      person => person.name === this.state.newName\n    );\n    if (newPerson) {\n      const confirmUpdate = window.confirm(\n        this.state.newName +\n          ' on jo luettelossa, korvataanko vanha numero uudella?'\n      );\n      const modified = {\n        name: newPerson.name,\n        number: this.state.newNumber,\n        id: newPerson.id\n      };\n      confirmUpdate === true\n        ? numberService\n            .update(modified.id, modified)\n            .then(response => {\n              let tmp = this.state.persons;\n              const index = tmp.indexOf(newPerson);\n              tmp.splice(index, 1);\n              tmp = tmp.concat(response);\n              this.setState({ persons: tmp });\n              this.setState({ message: 'numero muutettu onnistuneesti' });\n              setTimeout(() => {\n                this.setState({ message: null });\n              }, 2000);\n            })\n            .catch(error => {\n              this.createNewPerson(\n                'Virhe lisättäessä, henkilöä ei löytynyt. Lisättiin uusi henkilö.'\n              )\n              const updated = this.state.notes.filter(person => person.id !== modified.id)\n              console.log(updated)\n              this.setState({persons: updated})\n            })\n        : console.log(newPerson);\n    } else {\n      this.createNewPerson('numero lisätty onnistuneesti')\n    }\n  };\n\n  render() {\n    const nameList =\n      this.state.filter === ''\n        ? this.state.persons\n        : this.state.persons.filter(person =>\n            person.name.toLowerCase().match(this.state.filter.toLowerCase())\n          );\n\n    return (\n      <div>\n        <h2>Puhelinluettelo</h2>\n        <Notification message={this.state.message} />\n        <Filter\n          filterWord={this.state.filter}\n          changeHandler={this.filterChangedHandler}\n        />\n        <Form\n          addNew={this.addPerson}\n          name={this.state.newName}\n          nameChanged={this.nameChangedHandler}\n          number={this.state.newNumber}\n          numberChanged={this.numberChangedHandler}\n        />\n        <h3>Numerot</h3>\n        <table>\n          <tbody>\n            {nameList.map(person => (\n              <tr key={person.name}>\n                <td>{person.name}</td>\n                <td>{person.number}</td>\n                <td>\n                  <button onClick={() => this.personRemovedHandler(person)}>\n                    poista\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}